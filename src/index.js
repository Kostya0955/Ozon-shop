'use strict';



//—á–µ–∫–±–æ–∫—Å
function toggleCheckbox() {
    const checkbox = document.querySelectorAll('.filter-check_checkbox');
    checkbox.forEach(function (element) {
        element.addEventListener('change', function () {
            if (this.checked) {
                this.nextElementSibling.classList.add('checked');
            } else {
                this.nextElementSibling.classList.remove('checked');
            }
        });
    });
}


//–∫–æ—Ä–∑–∏–Ω–∞
function toggleCart() {
    const btnCart = document.getElementById('cart'); //–∑–Ω–∞—á–æ–∫ –∫–æ—Ä–∑–∏–Ω—ã
    const modalCart = document.querySelector('.cart'); //–º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫–æ—Ä–∑–∏–Ω—ã
    const closeBtn = document.querySelector('.cart-close'); //–∫—Ä–µ—Å—Ç–∏–∫

    btnCart.addEventListener('click', () => {
        modalCart.style.display = 'flex';
        document.body.style.overflow = 'hidden';
    });

    closeBtn.addEventListener('click', () => {
        modalCart.style.display = 'none';
        document.body.style.overflow = '';
    });
}



// end –∫–æ—Ä–∑–∏–Ω–∞


//—Ä–∞–±–æ—Ç–∞ —Å –∫–æ—Ä–∑–∏–Ω–æ–π
function addCart() {
    const cards = document.querySelectorAll('.goods .card'), //–≤—Å–µ —Ç–æ–≤–∞—Ä—ã
        cartWrapper = document.querySelector('.cart-wrapper'), //–æ–±–µ—Ä—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
        cartEmpty = document.getElementById('cart-empty'),
        countGoods = document.querySelector('.counter'); //–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤


    cards.forEach((card) => {
        const btn = card.querySelector('button');
        btn.addEventListener('click', () => {
            const cardClone = card.cloneNode(true) //–∫–æ–ø–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞
            cartWrapper.appendChild(cardClone);
            showData();
            const removeBtn = cardClone.querySelector('.btn');
            removeBtn.textContent = '–£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã';
            removeBtn.addEventListener('click', () => {
                cardClone.remove();
                showData();
            });
        });
    });

    function showData() {
        const cardsCart = cartWrapper.querySelectorAll('.card'),
            cardsPrise = cartWrapper.querySelectorAll('.card-price'),
            cardTotal = document.querySelector('.cart-total span');
            countGoods.textContent = cardsCart.length;

        let sum = 0;
        cardsPrise.forEach((cardsPrise) => {
            let price = parseFloat(cardsPrise.textContent);
            sum += price;
        });
        cardTotal.textContent = sum;

        if (cardsCart.length === 0) {
            cartWrapper.appendChild(cartEmpty);
        } else {
            cartEmpty.remove();
        }
    }

}
// end —Ä–∞–±–æ—Ç–∞ —Å –∫–æ—Ä–∑–∏–Ω–æ–π


//—Ñ–∏–ª—å—Ç—Ä –∞–∫—Ü–∏–∏
function actionPage() {
    const cards = document.querySelectorAll('.goods .card'),
    discountCheckbox = document.getElementById('discount-checkbox'),
    min = document.getElementById('min'),
    max = document.getElementById('max'),
    search = document.querySelector('.search-wrapper_input'),
    searchBtn = document.querySelector('.search-btn');

    discountCheckbox.addEventListener('click', filter);

min.addEventListener('change', filter);
max.addEventListener('change', filter);

function filter() {
 cards.forEach((card) => {
    const cardPrice = card.querySelector('.card-price'),
    price = parseFloat(cardPrice.textContent),
    discount = card.querySelector('.card-sale');

    if ((min.value && price < min.value) || (max.value && price > max.value)){
        card.parentNode.style.display = 'none';
    } else if (discountCheckbox.checked && !discount) {
        card.parentNode.style.display = 'none';
    } else {
        card.parentNode.style.display = '';
    }

 });
}

//–ø–æ–∏—Å–∫
searchBtn.addEventListener('click', () => {
    const searchText = new RegExp(search.value.trim(),'i');//–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä
    cards.forEach((card) => {
        const title = card.querySelector('.card-title');
        if(!searchText.test(title.textContent)){
            card.parentNode.style.display = 'none';
        } else {
            card.parentNode.style.display = '';
        }
    }); 
    search.value = '';
});
}
function filter() {
    const cards = document.querySelectorAll('.goods .card'),
        discountCheckbox = document.getElementById('discount-checkbox'),
        min = document.getElementById('min'),
        max = document.getElementById('max'),
        activeLi = document.querySelector('.catalog-list li.active');
    cards.forEach((card) => {
        const cardPrice = card.querySelector('.card-price'),
            price = parseFloat(cardPrice.textContent),
            discount = card.querySelector('.card-sale');

        if ((min.value && price < min.value) || (max.value && price > max.value)) {
            card.parentNode.style.display = 'none';
        } else if (discountCheckbox.checked && !discount) {
            card.parentNode.style.display = 'none';
        } else if (activeLi) {
            if (card.dataset.category !== activeLi.textContent) {
                card.parentNode.style.display = 'none'; 
            }
           
        } else {
            card.parentNode.style.display = '';
        }

    });
}
// end –ø–æ–∏—Å–∫ 

//–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
function getData() {
    const goodsWrapper = document.querySelector('.goods');
   return fetch('../db/db.json').then((response) => {
        if (response.ok){
          return response.json();   
        } else {
            throw new Error('–î–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã, –æ—à–∏–±–∫–∞:' + response.status);
        }
    })
    .then (data => {
        return data;
    })
    .catch(err => {
        console.log(err)
        goodsWrapper.innerHTML = '<div style="color:red; font-size: 20px">–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫</div>'
    });
}
//–≤—ã–≤–æ–¥ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤
function renderCards(data){
    const goodsWrapper = document.querySelector('.goods');
    data.goods.forEach((good) => {
        const card = document.createElement('div');
        card.className = 'col-12 col-md-6 col-lg-4 col-xl-3';
        card.innerHTML = `
                                <div class="card" data-category="${good.category}">
                                ${good.sale ? '<div class="card-sale">üî•Hot Saleüî•</div>': ''}
									<div class="card-img-wrapper">
										<span class="card-img-top"
											style="background-image: url('${good.img}')"></span>
									</div>
									<div class="card-body justify-content-between">
										<div class="card-price">${good.price}</div>
										<h5 class="card-title">${good.title}</h5>
										<button class="btn btn-primary">–í –∫–æ—Ä–∑–∏–Ω—É</button>
									</div>
								</div>
        `; 
        goodsWrapper.appendChild(card);
    });
}
// end –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
function renderCatalog() {
    const cards = document.querySelectorAll('.goods .card');
    const catalogList = document.querySelector('.catalog-list')
    const catalogWrapper = document.querySelector('.catalog')
    const categories = new Set();
    const catalogBtn = document.querySelector('.catalog-button')
    cards.forEach((card) => {
        categories.add(card.dataset.category);
    });
    categories.forEach((item) => {
        const li = document.createElement('li');
        li.textContent = item;
        catalogList.appendChild(li);
    });
    const allLi = catalogList.querySelectorAll('li');
catalogBtn.addEventListener('click', (event) => {
    if(catalogWrapper.style.display){
        catalogWrapper.style.display = '';
    } else {
    catalogWrapper.style.display = 'block';
    }
    if (event.target.tagName === 'LI') {
        cards.forEach((card) => {
            if (card.dataset.category === event.target.textContent) {
                card.parentNode.style.display = '';
            } else {
                card.parentNode.style.display = 'none';
            }
        });
    allLi.forEach((elem) => {
        if(elem === event.target) {
            elem.classList.add('active');
        } else {
            elem.classList.remove('active');
        }
    });
    filter();
    }
});
}

getData().then((data) => {
    renderCards(data);
    renderCatalog();
    actionPage();
    toggleCheckbox();
    toggleCart();
    addCart();
    
});



